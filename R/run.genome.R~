args <- commandArgs(trailingOnly = T)

for(i in dir()) source(i)

setwd("../PhyML-3.1/")

phymlPath <- paste0(getwd(), "/PhyML-3.1_macOS-MountainLion")

Nsims <- 100

# Set working directory to folder with loci, data format, whether to perform model testing, substitution model to be assessed, number of cores to use, whether to save predictive distributions, whether to save predictive data (e.g. ~/Desktop phyllip T 1 F F)

setwd(args[1])

format <- args[2]

if(args[3] != "T") model <- args[3]

ncore <- as.numeric(args[4])

if(ncore > 1){
	 paragenome <- T
	 paragene <- T
} else {
         paragenome <- F
	 paragene <- F
}
	   
if(format == "phyllip"){
	 genes <- grep(".+phy", dir(), value = T)		   
} else if(format == "fasta"){
	 genes <- grep(".+[.]fasta", dir(), value = T)
}
geneStats <- list()

if(!paragenome){
	 for(i in 1:length(genes)){
	   	 print(genes[i])
		 genes[i]
		 if(as.logical(args[3])) model <- get.model(genes[i])
	   	 geneStats[[i]] <- run.gene(genes[i], format = format, model = model, phymlPath = phymlPath, Nsims = Nsims, para = paragene, ncore = ncore)
	 }
}else{
	 ## START PARALLEL GENOME COMPUTING
	 runGene <- function(i){
	       	 return(run.gene(genes[i], format = format, model = model, phymlPath = phymlPath, Nsims = Nsims))
	 }
	     
	 cl <- makeCluster(ncore)
	 registerDoParallel(cl)
	 geneRuns <- foreach(x = 1:length(genes), .packages = c('phangorn', 'ape'), .export = c('get.test.statistics', 'runPhyML', 'getchisqs', 'run.gene')) %dopar% runGene(x)
	 stopCluster(cl)
	 geneStats <- geneRuns
	 ## END PARALLEL GENOME COMPUTING
}
	   
names(geneStats) <- genes
genomeStats <- matrix(NA, nrow = length(genes), ncol = 14)
for(i in 1:14){
	 genomeStats[,i] <- sapply(geneStats, function(x) x[[i]])
}
geneTrees <- lapply(geneStats, function(x) x[[15]])
names(geneTrees) <- genes
	   
if(model == "GTR+G"){
	 geneInferences <- list()
	 for(i in 1:length(geneStats)){
	       print(geneStats[[i]][16:18])
	       geneInferences[[i]] <- geneStats[[i]][16:18]
	 }
	 names(geneInferences) <- genes
}

rownames(genomeStats) <- genes
colnames(genomeStats) <- names(geneStats[[1]])[1:14]
results <- list(genome.results = genomeStats, empirical.trees = geneTrees, empirical.parameters = geneInferences)

